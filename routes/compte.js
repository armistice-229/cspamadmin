const express = require("express");
const path = require("path");
const Eleve = require("../models/Eleve");
const Transaction = require("../models/OperationCaisse");
const FraisScolarite = require("../models/FraisScolarite");

const router = express.Router();

router.get("/classes", async (req, res) => {
  try {
    const classes = await Eleve.distinct("classe");
    res.json(classes.sort());
  } catch (err) {
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des classes." });
  }
});


router.get("/eleves/:classe", async (req, res) => {
  try {
    const eleves = await Eleve.find({ classe: req.params.classe }).sort({ nom: 1 });
    res.json(eleves);
  } catch (err) {
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des √©l√®ves." });
  }
});


// ‚úÖ G√©n√©ration du relev√© de compte scolarit√© au format PDF pour un √©l√®ve
const generateRelevePDF = require("../utils/generateRelevePDF");

/*// ‚úÖ G√©n√©ration du relev√© de compte scolarit√© au format PDF
router.get("/releve/:eleveId", async (req, res) => {
  try {
    const eleve = await Eleve.findById(req.params.eleveId);
    if (!eleve)
      return res.status(404).json({ message: "√âl√®ve introuvable." });

    const transactions = await Transaction.find({
      eleve: eleve._id,
      type: "entree",
    }).sort({ date: 1 });

    const tarif = await FraisScolarite.findOne({
      classe: eleve.classe,
      anneeScolaire: eleve.anneeScolaire,
    });

    await generateRelevePDF(res, eleve, transactions, tarif);
  } catch (err) {
    console.error("Erreur g√©n√©ration relev√© :", err);
    res.status(500).json({ message: "Erreur lors de la g√©n√©ration du relev√©." });
  }
});

*/

router.get("/releve/:eleveId", async (req, res) => {
  try {
    const eleve = await Eleve.findById(req.params.eleveId);
    if (!eleve)
      return res.status(404).json({ message: "√âl√®ve introuvable." });

    // 1Ô∏è‚É£ R√©cup√©rer toutes les transactions li√©es √† cet √©l√®ve
    const transactionsAll = await Transaction.find({
      type: "entree",
      nomEleve: new RegExp(`${eleve.nom}\\s*${eleve.prenom}`, "i"),
    }).sort({ date: 1 });

    // 2Ô∏è‚É£ Liste de mots-cl√©s √† exclure
    const motsCleExclus = [
      "ancienne", "ancien", "ann√©e pass√©e", "ann√©e derni√®re",
      "2023", "2022", "2021",
      "CEP", "examen", "cantine", "tenue", "certificat", "livre",
      "transport", "fourniture", "restant 2023-2024", "reste", "photocopie"
    ];

    // 3Ô∏è‚É£ Filtrage intelligent
    const transactions = transactionsAll.filter(t => {
      if (!t.motifs) return false;
      const motif = t.motifs.toLowerCase();

      // Exclure si le motif contient un mot-cl√© non li√© √† la scolarit√©
      const estHorsScolarite = motsCleExclus.some(m => motif.includes(m));
      if (estHorsScolarite) return false;

      return true;
    });

    // üí¨ Debug utile
    console.log(`Transactions avant filtrage : ${transactionsAll.length}`);
    console.log(`Transactions apr√®s filtrage : ${transactions.length}`);

     
    // 4Ô∏è‚É£ Frais de scolarit√© pour sa classe et son ann√©e
    const tarif = await FraisScolarite.findOne({
      classe: eleve.classe,
      anneeScolaire: eleve.anneeScolaire,
    });

    let montantScolarite = tarif ? tarif.montant : 0;

    // 5Ô∏è‚É£ Ajustement : si inscription OU paiement de 3600 ‚Üí +1000 FCFA une seule fois
    const aPayeInscription = transactions.some(t => {
      if (!t.motifs) return false;
      const motif = t.motifs.toLowerCase();
      // Regex stricte : "inscription" seul, pas "r√©inscription"
      return /\b(?<!r√©)inscription\b/.test(motif);
    });
    const aPaye3600 = transactions.some(t => t.montant === 3600);

    if (aPayeInscription || aPaye3600) {
      montantScolarite += 1200;
      console.log(`+1200 FCFA ajout√© pour ${eleve.nom} (${aPayeInscription ? "inscription" : "montant 3600"})`);
    }


    // 6Ô∏è‚É£ G√©n√©ration du PDF avec le nouveau total
    await generateRelevePDF(res, eleve, transactions, { montant: montantScolarite });

  } catch (err) {
    console.error("Erreur g√©n√©ration relev√© :", err);
    res.status(500).json({ message: "Erreur lors de la g√©n√©ration du relev√©." });
  }
});




module.exports = router;
